{"version":3,"sources":["UIElements.tsx","index.tsx"],"names":["websocket","MessageType","CardType","CardUI","props","text","color","card","type","WIZARD","FOOL","NUMBER","number","alert","className","trump","onClick","owner","withOwner","TableUI","cards","map","id","HandUI","send","JSON","stringify","action","this","React","Component","UserListUI","tricks","players","user","announcement","turn","undefined","name","score","round","MessageListUI","messages","message","msg_type","ERROR","msg","JoinUI","onMessage","state","value","event","preventDefault","ws","WebSocket","onopen","onOpen","bind","onmessage","setState","currentTarget","onSubmit","handleJoin","onChange","handleChange","placeholder","ChooseTrumpUI","handleChoose","AnnounceUI","parseInt","handleAnnounce","ScoreBoardUI","sort","a","b","place","table_entries","player","GameScreen","forEach","p","waiting_for","length","creator","kick","game_state","announcing","choosing_trump","table","hand","WaitingRoomScreen","winners","game_over","i","Game","GameStates","NONE","JOINED","RUNNING","GAME_OVER","running","data","parse","concat","status","MESSAGE","ReactDOM","render","document","getElementsByClassName"],"mappings":"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","file":"static/js/main.6715f874.chunk.js","sourcesContent":["import React, {FormEvent} from 'react';\n\nexport let websocket : WebSocket;\n\nexport enum MessageType {\n  MESSAGE,\n  ERROR,\n}\n\nexport enum CardType {\n  WIZARD = \"wizard\",\n  FOOL = \"fool\",\n  NUMBER = \"number\",\n}\n\nexport interface Message {\n  msg_type : MessageType;\n  msg : string;\n}\n\nexport interface Card {\n  type : CardType;\n  number : Number;\n  color : string;\n  owner : string;\n}\n\nexport interface CardUIProps {\n  card : Card;\n  trump : Boolean;\n  withOwner? : Boolean;\n  onClick? : React.MouseEventHandler;\n}\n\nexport function CardUI(props : CardUIProps) {\n  const card = props.card;\n  let text, color;\n  switch (card.type) {\n    case CardType.WIZARD:\n      text = 'Zauberer';\n      break;\n    case CardType.FOOL:\n      text = 'Narr';\n      break;\n    case CardType.NUMBER:\n      text = card.number;\n      color = card.color;\n      break;\n    default:\n      alert('David screwed up lol');\n  }\n  return (\n    <button className={'card ' + color + (props.trump ? ' trump' : '')}\n            onClick={props.onClick}>\n      { text }\n      { card.owner && props.withOwner && <br /> }\n      { card.owner && props.withOwner && card.owner }\n    </button>\n  );\n}\n\nexport function TableUI(props : any) {\n  let cards = props.cards.map((card : any) =>\n    <CardUI card={card} withOwner={true} trump={false} />\n  );\n  return (\n    <div id='table'>\n    {props.trump && <CardUI card={props.trump} trump={true} />}\n      {cards}\n    </div>\n  );\n}\n\nexport class HandUI extends React.Component<any, any> {\n  onClick(card : Card) {\n    websocket.send(JSON.stringify({action: 'play_card', ...card}));\n  }\n  render() {\n    let cards = this.props.cards.map((card : any) =>\n      <CardUI card={card} withOwner={false} trump={false} onClick={() => this.onClick(card)}/>\n    );\n    return (\n      <div id='hand'>\n        {cards}\n      </div>\n    );\n  }\n}\n\nexport function UserListUI(props : any) {\n  let tricks = 0;\n  const players = props.players.map((user : any) => {\n      tricks += user.announcement > 0 ? user.announcement : 0;\n      return <li key={user.name} className={user.turn ? \"turn\" : undefined}>\n               {user.name}\n               {user.announcement > -1 && \" (\" + user.tricks + \" von \" + user.announcement + \") \"}\n               &nbsp;({user.score})\n             </li>\n    }\n  );\n  return (\n    <div className=\"users\">\n      <h3>Users</h3>\n      <ul id=\"userlist\">{players}</ul>\n      <p id=\"trick-count\">{tricks} von {props.round}</p>\n    </div>\n  );\n}\n\nexport function MessageListUI(props : any) {\n  const messages = props.messages.map((message : Message) =>\n    <li className={(message.msg_type === MessageType.ERROR ? \"error\": undefined) }\n      key={message.msg}>{message.msg}</li>\n  );\n  return (\n    <div className=\"messages\">\n      <h3>Messages</h3>\n      <ul id='messageList'>{messages}</ul>\n    </div>\n  );\n}\n\nexport class JoinUI extends React.Component<{onMessage: Function}, { value: string}> {\n  onMessage : any;\n  state = { value: '' };\n\n  handleJoin(event : FormEvent) {\n    event.preventDefault();\n    const ws = new WebSocket('ws://127.0.0.1:6791');\n    ws.onopen = this.onOpen.bind(this);\n    ws.onmessage = this.onMessage;\n\n    websocket = ws;\n  }\n\n  handleChange(event : FormEvent<HTMLInputElement>) {\n    this.setState({value: event.currentTarget.value});\n  }\n\n  onOpen() {\n    websocket.send(JSON.stringify({action: 'join', name: this.state.value}));\n  }\n\n  render() {\n    this.onMessage = this.props.onMessage;\n    return (\n      <form className='join' onSubmit={this.handleJoin.bind(this)}>\n        <input type='text' onChange={this.handleChange.bind(this)}\n                         value={this.state.value}\n                         placeholder='Name' />\n        <input type='submit' value='Join' />\n      </form>\n    );\n  }\n}\n\nexport class ChooseTrumpUI extends React.Component<{}, {value: string}> {\n  state = {value: 'red'};\n\n  handleChoose(event : FormEvent) {\n    event.preventDefault();\n    websocket.send(JSON.stringify({action: 'choose_trump', color: this.state.value}));\n  }\n\n  handleChange(event : FormEvent<HTMLSelectElement>) {\n    this.setState({value: event.currentTarget.value});\n  }\n\n  render() {\n    return (\n        <form id='choose_trump' onSubmit={this.handleChoose.bind(this)}>\n          <select id='color' name='color' value={this.state.value}\n                onChange={this.handleChange.bind(this)}>\n            <option value='red'>Red</option>\n            <option value='yellow'>Yellow</option>\n            <option value='green'>Green</option>\n            <option value='blue'>Blue</option>\n          </select>\n          <input type='submit' value='Choose' />\n        </form>\n    );\n  }\n}\n\nexport class AnnounceUI extends React.Component<{}, {value: string}> {\n  state = {value: ''};\n\n  handleAnnounce(event : FormEvent) {\n    event.preventDefault();\n    websocket.send(JSON.stringify({action: 'announce', announcement: parseInt(this.state.value)}));\n  }\n\n  handleChange(event : FormEvent<HTMLInputElement>) {\n    this.setState({value: event.currentTarget.value});\n  }\n\n  render() {\n    return (\n      <form className='announce' onSubmit={this.handleAnnounce.bind(this)}>\n        <input type='text' onChange={this.handleChange.bind(this)}\n                         value={this.state.value}\n                         placeholder='Announcement' />\n        <input type='submit' value='Announce' />\n      </form>\n    );\n  }\n}\n\nexport function ScoreBoardUI(props : {players: {score: number, name: string}[]}) {\n  props.players.sort((a, b) => b.score - a.score);\n  let place = 1;\n  const table_entries = props.players.map((player) => {\n    return <tr><td>{place++}</td><td>{player.name}</td><td>{player.score}</td></tr>\n  });\n  return (\n    <table className=\"score-board\">\n      <th>Place</th><th>Name</th><th>Score</th>\n      {table_entries}\n    </table>\n  );\n}\n","import React, {FormEvent} from 'react';\nimport ReactDOM from 'react-dom';\nimport {websocket, Message, MessageType, Card, CardType, AnnounceUI, HandUI, TableUI, UserListUI,\n        MessageListUI, ScoreBoardUI, JoinUI, ChooseTrumpUI} from './UIElements'\nimport './index.css';\n\ninterface GameScreenProps {\n  game_state : any;\n  players : any;\n  messages : Message[];\n  waiting_for? : any;\n  creator : Boolean;\n}\n\nclass GameScreen extends React.Component<GameScreenProps, {}> {\n  kick(players : string[]) {\n    players.forEach((p) => {\n      websocket.send(JSON.stringify({action: 'kick', user: p}));\n    });\n  }\n  render() {\n    return [\n        <div className='main'>\n          {this.props.waiting_for && this.props.waiting_for.length > 0 &&\n              <div className='waiting'>\n                <p id='waiting-list'>{this.props.waiting_for}</p>\n              {this.props.creator &&\n                  <button className=\"center\" id=\"kick\"\n                  onClick={() => this.kick(this.props.waiting_for)}>Kick em</button>}\n              </div>\n          }\n          {this.props.game_state.announcing && <AnnounceUI />}\n          {this.props.game_state.choosing_trump && <ChooseTrumpUI />}\n          <TableUI trump={this.props.game_state.trump} cards={this.props.game_state.table} />\n          <HandUI cards={this.props.game_state.hand} />\n        </div>,\n        <div className='controls right'>\n          <UserListUI round={this.props.game_state.round} players={this.props.players} />\n          <MessageListUI messages={this.props.messages} />\n        </div>,\n    ];\n  }\n}\n\nclass WaitingRoomScreen extends React.Component<any, any> {\n  onClick(event : FormEvent) {\n    event.preventDefault();\n    websocket.send(JSON.stringify({action: 'start_game'}));\n  }\n\n  render() {\n    let winners = \"\";\n    if (this.props.game_over) {\n      this.props.players.sort((a : any, b: any) => a.score - b.score);\n      winners = this.props.players[0].name;\n      let i;\n      for (i = 1; i < this.props.players.length; ++i) {\n        if (this.props.players[0].score !== this.props.players[i].score) {\n          break;\n        }\n        winners += \", \" + this.props.players[i].name;\n      }\n      if (i > 1) {\n        winners = winners + \" win the game!\";\n      } else {\n        winners = winners + \" wins the game!\";\n      }\n    }\n    return (\n      <div className='pyro-container'>\n        <div id=\"gameover\" className={this.props.game_over ? \"pyro\" : undefined}>\n          <div className=\"before\"></div>\n          <div className=\"after\"></div>\n          <h1 className=\"winner\">{winners}</h1>\n          { this.props.players &&\n              <ScoreBoardUI players={this.props.players} /> }\n          { this.props.creator &&\n              <button  className=\"center\" id=\"start_game\"\n                  onClick={this.onClick.bind(this)}>(Re)start game</button> }\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component<any, any> {\n  GameStates = {\n    NONE: 0,\n    JOINED: 1,\n    RUNNING: 2,\n    GAME_OVER: 3,\n  }\n\n  constructor(props : any) {\n    super(props);\n    this.state = {\n      name: '',\n      creator: false,\n      running: false,\n      players: null,\n      state: this.GameStates.NONE,\n      game_state: null,\n      waiting_for: null,\n      messages: [],\n    };\n  }\n\n  render() {\n    switch (this.state.state) {\n      case this.GameStates.NONE:\n        return (\n          <JoinUI\n            onMessage={(event : MessageEvent) => this.onMessage(event)} />\n        );\n      case this.GameStates.JOINED:\n        return (\n          <WaitingRoomScreen\n            players={this.state.players}\n            creator={this.state.creator}\n            game_over={false} />\n        );\n      case this.GameStates.RUNNING:\n        if (!this.state.players || !this.state.game_state) {\n          return <div />;\n        }\n        return (\n          <GameScreen\n            players={this.state.players}\n            messages={this.state.messages}\n            game_state={this.state.game_state}\n            waiting_for={this.state.waiting_for}\n            creator={this.state.creator} />\n        );\n      case this.GameStates.GAME_OVER:\n        return (\n          <WaitingRoomScreen\n            players={this.state.players}\n            creator={this.state.creator}\n            game_over={true} />\n        );\n      default:\n        return <div>Unsorpported state</div>;\n    }\n  }\n\n  onMessage(event : MessageEvent) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'joined':\n        this.setState({\n          messages: this.state.messages.concat(['Joined game!']),\n          state: this.GameStates.JOINED,\n        });\n        break;\n      case 'state':\n        this.setState({\n          game_state: data,\n          state: data.game_over ? this.GameStates.GAME_OVER : this.GameStates.RUNNING,\n        });\n        break;\n      case 'player':\n        this.setState({players: data.players});\n        break;\n      case 'rights':\n        this.setState({creator: data.status === 'creator'});\n        break;\n      case 'message':\n        this.setState({messages: this.state.messages.concat(\n          [{msg_type: MessageType.MESSAGE, msg: data.msg}])});\n        break;\n      case 'error':\n        this.setState({messages: this.state.messages.concat(\n          [{msg_type: MessageType.ERROR, msg: data.msg}])});\n        break;\n      case 'management':\n        this.setState({waiting_for: data.waiting_for});\n        break;\n      default:\n        alert('David screwed up lol');\n    }\n  }\n}\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementsByClassName('game')[0]\n);\n"],"sourceRoot":""}